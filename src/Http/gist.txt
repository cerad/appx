Replace
public function  getHeaders();
public function  hasHeader     ($name);
public function  getHeader     ($name);
public function  getHeaderLines($name);
With
public function  getHeader($name,$defaultValue,$lines = false);
Where
if ($name === null) return all headers - replaces getHeader()
if ($name === string)
  and header exists
    if $lines === false return comma delimited string
    if $lines === true return array of values
  and header does not exist
    return default value - eliminates need for hasHeader
if ($name === array)
  return array of headers values

Replace
public function withHeader     ($name, $value);
public function withAddedHeader($name, $value);
With
public function withHeader     ($name, $value, $line = false, mutable = false);

if ($name === string and $value === null)
  *** remove the header, currently missing withoutHeader
if ($name === string)
  add the header or header lines based on $line flag
if ($name === array)
  add one or more headers
  *** This is what motivated the gist.  
      No reason why we should not be able to add several headers
      in one shot and avoid the cloning overhead

Same methods for the Request::Attributes collection.

I think reducing the number of required methods even at the slight cost of increasing their complexity
will enhance the chances of the standard being adopted.

-----------------
$mutable - Allow for optional mutating.  

I know this will be controversial and should probably be it's own gist.
Making immutatablity optional for headers (already is for attributes)
might alleviate some of the performance anxieties.

For my own request/response applications adjusting the response headers just prior to sending the response
is often the only time I need to modify the request object.  Be nice if cloning was not required.


